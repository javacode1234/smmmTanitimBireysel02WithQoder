// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(CLIENT)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  client        Client?
  accounts      Account[]
  sessions      Session[]
  messages      Message[]
}

enum Role {
  ADMIN
  CLIENT
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Client model
model Client {
  id           String        @id @default(cuid())
  userId       String        @unique
  companyName  String
  taxNumber    String        @unique
  phone        String?
  address      String?       @db.Text
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  declarations Declaration[]
  collections  Collection[]
  announcements AnnouncementClient[]
}

// Announcement model
model Announcement {
  id          String               @id @default(cuid())
  title       String
  message     String               @db.Text
  type        AnnouncementType     @default(INFO)
  targetAll   Boolean              @default(true)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  
  clients     AnnouncementClient[]
}

enum AnnouncementType {
  INFO
  WARNING
  REMINDER
  URGENT
}

model AnnouncementClient {
  id             String       @id @default(cuid())
  announcementId String
  clientId       String
  read           Boolean      @default(false)
  
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  client         Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  @@unique([announcementId, clientId])
}

// Declaration model (Tax Returns)
model Declaration {
  id         String   @id @default(cuid())
  clientId   String
  period     String   // e.g., "2024-01" or "Q1-2024"
  title      String?
  pdfUrl     String
  uploadedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

// Reminder model
model Reminder {
  id        String   @id @default(cuid())
  title     String
  message   String   @db.Text
  date      DateTime
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Collection model (Payment tracking)
model Collection {
  id        String         @id @default(cuid())
  clientId  String
  amount    Decimal        @db.Decimal(10, 2)
  type      CollectionType @default(INCOME)
  date      DateTime
  note      String?        @db.Text
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  
  client    Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

enum CollectionType {
  INCOME
  EXPENSE
}

// Content Section model for Landing Page CMS
model ContentSection {
  id          String   @id @default(cuid())
  sectionName String   @unique
  content     String   @db.LongText
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Message model for client-admin communication
model Message {
  id        String   @id @default(cuid())
  userId    String
  subject   String
  message   String   @db.Text
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Settings model for company information
model Settings {
  id          String   @id @default(cuid())
  companyName String
  logo        String?
  taxNumber   String?
  email       String?
  phone       String?
  address     String?  @db.Text
  smtpHost    String?
  smtpPort    Int?
  smtpUser    String?
  smtpPass    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// JobApplication model for career applications
model JobApplication {
  id          String            @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  phone       String
  position    String?           // Başvurulan pozisyon
  cvUrl       String            // CV dosyasının URL'i
  coverLetter String?           @db.Text
  status      ApplicationStatus @default(PENDING)
  notes       String?           @db.Text // Admin notları
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

enum ApplicationStatus {
  PENDING     // Beklemede
  REVIEWED    // İncelendi
  INTERVIEW   // Mülakata Çağrıldı
  ACCEPTED    // Kabul Edildi
  REJECTED    // Reddedildi
}

// QuoteRequest model for pricing quote requests
model QuoteRequest {
  id          String           @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  phone       String
  companyName String?
  packageType String           // Basic, Standard, Premium
  message     String?          @db.Text
  status      QuoteStatus      @default(PENDING)
  notes       String?          @db.Text // Admin notları
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

enum QuoteStatus {
  PENDING     // Beklemede
  CONTACTED   // İletişime Geçildi
  SENT        // Teklif Gönderildi
  ACCEPTED    // Kabul Edildi
  REJECTED    // Reddedildi
}
