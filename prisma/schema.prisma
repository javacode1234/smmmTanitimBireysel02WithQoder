// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(CLIENT)
  image         String?   @db.LongText
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  client        Client?
  accounts      Account[]
  sessions      Session[]
  messages      Message[]
}

enum Role {
  ADMIN
  CLIENT
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Client model
model Client {
  id           String        @id @default(cuid())
  userId       String        @unique
  companyName  String
  taxNumber    String        @unique
  phone        String?
  address      String?       @db.Text
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  declarations Declaration[]
  collections  Collection[]
  announcements AnnouncementClient[]
}

// Announcement model
model Announcement {
  id          String               @id @default(cuid())
  title       String
  message     String               @db.Text
  type        AnnouncementType     @default(INFO)
  targetAll   Boolean              @default(true)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  
  clients     AnnouncementClient[]
}

enum AnnouncementType {
  INFO
  WARNING
  REMINDER
  URGENT
}

model AnnouncementClient {
  id             String       @id @default(cuid())
  announcementId String
  clientId       String
  read           Boolean      @default(false)
  
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  client         Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  @@unique([announcementId, clientId])
}

// Declaration model (Tax Returns)
model Declaration {
  id         String   @id @default(cuid())
  clientId   String
  period     String   // e.g., "2024-01" or "Q1-2024"
  title      String?
  pdfUrl     String
  uploadedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  client     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

// Reminder model
model Reminder {
  id        String   @id @default(cuid())
  title     String
  message   String   @db.Text
  date      DateTime
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Collection model (Payment tracking)
model Collection {
  id        String         @id @default(cuid())
  clientId  String
  amount    Decimal        @db.Decimal(10, 2)
  type      CollectionType @default(INCOME)
  date      DateTime
  note      String?        @db.Text
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  
  client    Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

enum CollectionType {
  INCOME
  EXPENSE
}

// Content Management System for Landing Page
// Site Settings (Global)
model SiteSettings {
  id              String   @id @default(cuid())
  siteName        String   @default("SMMM Ofisi")
  siteDescription String?  @db.Text
  favicon         String?  @db.LongText // Base64
  brandIcon       String?  @db.LongText // Base64
  phone           String?
  email           String?
  address         String?  @db.Text
  mapLatitude     String?
  mapLongitude    String?
  mapEmbedUrl     String?  @db.Text // Google Maps embed URL
  facebookUrl     String?
  twitterUrl      String?
  linkedinUrl     String?
  instagramUrl    String?
  youtubeUrl      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Hero Section
model HeroSection {
  id          String   @id @default(cuid())
  title       String
  subtitle    String   @db.Text
  description String?  @db.Text
  buttonText  String?
  buttonUrl   String?
  image       String?  @db.LongText // Base64
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Clients Section (Logos)
model ClientLogo {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  url         String?
  logo        String   @db.LongText // Base64
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// About Section
model AboutSection {
  id          String          @id @default(cuid())
  title       String
  subtitle    String?         @db.Text
  description String          @db.Text
  image       String?         @db.LongText // Base64
  features    AboutFeature[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model AboutFeature {
  id          String       @id @default(cuid())
  sectionId   String
  icon        String? // Lucide icon name
  title       String
  description String       @db.Text
  order       Int          @default(0)
  section     AboutSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}

// Services Section
model Service {
  id          String   @id @default(cuid())
  icon        String? // Lucide icon name
  title       String
  description String   @db.Text
  features    String?  @db.Text // JSON array of features
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Workflow Section
model WorkflowStep {
  id          String   @id @default(cuid())
  icon        String? // Lucide icon name
  title       String
  description String   @db.Text
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Pricing Section
model PricingPlan {
  id          String          @id @default(cuid())
  name        String
  price       String
  period      String          @default("ay")
  description String?         @db.Text
  features    PricingFeature[]
  isPopular   Boolean         @default(false)
  isActive    Boolean         @default(true)
  order       Int             @default(0)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model PricingFeature {
  id        String      @id @default(cuid())
  planId    String
  text      String
  isIncluded Boolean    @default(true)
  order     Int         @default(0)
  plan      PricingPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
}

// Testimonials Section
model Testimonial {
  id        String   @id @default(cuid())
  name      String
  position  String
  company   String?
  content   String   @db.Text
  avatar    String?  @db.LongText // Base64
  rating    Int      @default(5)
  isActive  Boolean  @default(true)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Team Section
model TeamMember {
  id          String   @id @default(cuid())
  name        String
  position    String
  bio         String?  @db.Text
  avatar      String?  @db.LongText // Base64
  email       String?
  phone       String?
  linkedinUrl String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// FAQ Section
model FAQCategory {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  order     Int      @default(0)
  faqs      FAQ[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FAQ {
  id         String      @id @default(cuid())
  categoryId String
  question   String
  answer     String      @db.Text
  order      Int         @default(0)
  category   FAQCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

// Message model for client-admin communication
model Message {
  id        String   @id @default(cuid())
  userId    String
  subject   String
  message   String   @db.Text
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Settings model for company information
model Settings {
  id          String   @id @default(cuid())
  companyName String
  logo        String?
  taxNumber   String?
  email       String?
  phone       String?
  address     String?  @db.Text
  smtpHost    String?
  smtpPort    Int?
  smtpUser    String?
  smtpPass    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// JobApplication model for career applications
model JobApplication {
  id          String            @id @default(cuid())
  name        String
  email       String
  phone       String
  position    String
  experience  String
  education   String
  coverLetter String?           @db.Text
  cvFileName  String?
  cvFileData  String?           @db.LongText  // Base64 encoded CV file
  cvMimeType  String?           // MIME type of the file (e.g., "application/pdf")
  status      JobApplicationStatus @default(NEW)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

enum JobApplicationStatus {
  NEW         // Yeni
  REVIEWING   // İnceleniyor
  INTERVIEWED // Görüşme Yapıldı
  ACCEPTED    // Kabul Edildi
  REJECTED    // Reddedildi
}

// QuoteRequest model for pricing quote requests
model QuoteRequest {
  id          String           @id @default(cuid())
  name        String
  email       String
  phone       String
  company     String
  serviceType String
  message     String?          @db.Text
  status      QuoteStatus      @default(NEW)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

enum QuoteStatus {
  NEW         // Yeni
  PENDING     // Beklemede
  REVIEWED    // İncelendi
  CONTACTED   // İletişime Geçildi
  COMPLETED   // Tamamlandı
}

// ContactMessage model for contact form submissions
model ContactMessage {
  id        String              @id @default(cuid())
  name      String
  email     String
  phone     String
  subject   String
  message   String              @db.Text
  status    ContactMessageStatus @default(NEW)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

enum ContactMessageStatus {
  NEW       // Yeni
  PENDING   // Beklemede
  REPLIED   // Yanıtlandı
  RESOLVED  // Çözüldü
}
